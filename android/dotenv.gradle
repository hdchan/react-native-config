def readDotEnv(currentFlavor) {
    def envFile = ".env"

    if (System.env['ENVFILE']) {
        envFile = System.env['ENVFILE'];
    } else if (project.hasProperty("envConfigFiles")) {
        def possibleFile = project.envConfigFiles.get(currentFlavor)
        if (possibleFile) {
            envFile = possibleFile;
        }
    }

    def env = [:]
    println("Reading env from: $envFile")
    try {
        new File("$project.rootDir/../$envFile").eachLine { line ->
            def matcher = (line =~ /^\s*([\w\d\.\-_]+)\s*=\s*(.*)?\s*$/)
            if (matcher.getCount() == 1 && matcher[0].size() == 3){
                env.put(matcher[0][1], matcher[0][2])
            }
        }
    } catch (FileNotFoundException ex) {
        println("**************************")
        println("*** Missing .env file ****")
        println("**************************")
    }
    project.ext.set("env", env)
}

tasks.whenTaskAdded { task ->
    if (project.hasProperty("envConfigFiles")) {
        project.envConfigFiles.each { envKey, envValue ->
            if (task.name.toLowerCase() == "generate"+envKey+"buildconfig") {
                task.doFirst() {
                    android.applicationVariants.all { variant ->
                        def variantConfigString = variant.getVariantData().getVariantConfiguration().getFullName()
                        if (envKey.contains(variantConfigString.toLowerCase())) {
                            readDotEnv(envKey)
                            project.env.each { k, v ->
                                def escaped = v.replaceAll("%","\\\\u0025")
                                variant.buildConfigField "String", k, "\"$v\""
                                variant.resValue "string", k, "\"$escaped\""
                            }
                        }
                    }

                }
            }
        }
    }
}

